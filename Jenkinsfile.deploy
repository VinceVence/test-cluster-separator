pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: test
spec:
  containers:
  - name: aws
    image: amazon/aws-cli:latest
    volumeMounts:
    - mountPath: "/var/jenkins_home/"
      name: "jenkins"
      readOnly: false
    command:
    - cat
    tty: true
  - name: alpine
    image: alpine:latest
    volumeMounts:
    - mountPath: "/var/jenkins_home/"
      name: "jenkins"
      readOnly: false
    command:
    - cat
    tty: true
  - name: ubuntu
    image: ubuntu:latest
    volumeMounts:
    - mountPath: "/var/jenkins_home/"
      name: "jenkins"
      readOnly: false
    command:
    - cat
    tty: true
  volumes:
  - name: jenkins
    persistentVolumeClaim:
      claimName: jjb-pvc
        '''
                }
    }
       environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    stages {
        stage('Update kube-context') {
          steps {
            container('ubuntu') {
              sh 'apt-get update'
              sh 'apt-get install -y awscli'
              sh 'aws --version'
              sh 'aws eks update-kubeconfig --region us-east-1 --name devopsx-eks'
            }
          }
        }

        stage('Deploy Cybersecurity Tools') {
            steps {
                container('ubuntu') {
                  sh 'echo STAGE 1 Getting Dependencies'
                                   
                  sh 'curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash'
                  sh 'helm version'
                  sh 'helm repo add stable https://kubernetes-charts.storage.googleapis.com'
                  sh 'helm repo update'

                  sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
                  sh 'curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"'
                  sh 'echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check'   
                  sh 'install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl'
                  sh 'kubectl version --client'

                  sh 'kubectl create namespace defectdojo'
                  sh 'kubectl create namespace kubeclarity'
                  sh 'kubectl create namespace hsvault'

                  sh 'helm install --generate-name -f helmfiles/defectdojo/helmfile.yaml charts/defectdojo --namespace defectdojo'
                  sh 'helm install --generate-name -f helmfiles/vault/helmfile.yaml charts/vault --namespace hsvault'

                }
            }
        }
    }
}